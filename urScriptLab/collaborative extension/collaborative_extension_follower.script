# FOLLOWER SCRIPT

#Initialization of Variables
global moveTarget = [0, 0, 0, 0, 0, 0]
add_frame("collabFrame",p[0,0,0,0,0,0],"base")
add_frame("tcpMaster",p[0,0,0,0,0,0],"base")

tWait = 0.0005

def read_target():
    tmpMoveTarget=[0,0,0,0,0,0]
    tmpMoveTarget[0] = read_input_float_register(24)
    tmpMoveTarget[1] = read_input_float_register(25)
    tmpMoveTarget[2] = read_input_float_register(26)
    tmpMoveTarget[3] = read_input_float_register(27)
    tmpMoveTarget[4] = read_input_float_register(28)
    tmpMoveTarget[5] = read_input_float_register(29)
    global moveTarget=tmpMoveTarget
end

write_output_integer_register(25, 0)

######### MAIN PROGRAM #########
while (True):
  startTime = time(mode = 2)
  while(True):
    functionCode = read_input_integer_register(25)
    if functionCode != 12 and functionCode != 20 :

      #movel
      if functionCode == 10:
        # Acknowledge command received (stage 2)
        write_output_integer_register(25, 2)
    
        # Read parameters
        a = read_input_float_register(30)
        v = read_input_float_register(31)
        t = read_input_float_register(32)
        r = read_input_float_register(33)
        read_target()
    
        # Execute movel (stage 3)
        movel(struct(pose = p[moveTarget[0], moveTarget[1], moveTarget[2], moveTarget[3], moveTarget[4], moveTarget[5]], frame = collabFrame), a, v, t, r)
    
        # Signal done
        write_output_integer_register(25, 3)
    
        # Wait for master to reset to 0
        while (read_input_integer_register(25) != 0):
          sleep(tWait)
        end
    
        # Reset self to idle (stage 0)
        write_output_integer_register(25, 0)
      
      #movej
      elif functionCode == 11:
        #Acknowledge command received (stage 2)
        write_output_integer_register(25, 2)
        a = read_input_float_register(30)
        v = read_input_float_register(31)
        t = read_input_float_register(32)
        r = read_input_float_register(33)
        read_target()
        movej(moveTarget,a,v,t,r)
        
        # Signal done
        write_output_integer_register(25, 3)
        # Wait for master to reset to 0
        while (read_input_integer_register(25) != 0):
          sleep(tWait)
        end
        write_output_integer_register(25, 0)
      
      # #add_collab_frame
      # elif (functionCode == 21):
      #   #Acknowledge command received (stage 2)
      #   write_output_integer_register(25, 2)
      #   read_target()
      #   add_frame("frameA",p[moveTarget[0], moveTarget[1], moveTarget[2], moveTarget[3], moveTarget[4], moveTarget[5]],"base")
      #   sleep(0.004)
      #   # Signal done
      #   write_output_integer_register(25, 3)
      #   # Wait for master to reset to 0
      #   while (read_input_integer_register(25) != 0):
      #     sleep(tWait)
      #   end
      #   write_output_integer_register(25, 0) 
      #move_collab_frame
      elif (functionCode == 21):
        #Acknowledge command received (stage 2)
        write_output_integer_register(25, 2)
        read_target()
        frame = read_input_integer_register(30)
        if frame == 1:
          move_frame("collabFrame",p[moveTarget[0], moveTarget[1], moveTarget[2], moveTarget[3], moveTarget[4], moveTarget[5]],"base")
        else frame == 2:
          move_frame("tcpMaster",p[moveTarget[0], moveTarget[1], moveTarget[2], moveTarget[3], moveTarget[4], moveTarget[5]],"collabFrame")
        sleep(0.004)
        # Signal done
        write_output_integer_register(25, 3)
        # Wait for master to reset to 0
        while (read_input_integer_register(25) != 0):
          sleep(tWait)
        end
        write_output_integer_register(25, 0) 
      

      elif functionCode == 13:
        # Acknowledge command received (stage 2)
        write_output_integer_register(25, 2)

        n = read_input_integer_register(27) #The number (id) of the output
        l = read_input_boolean_register(64) #signal level
        set_configurable_digital_out(n, l)
        sleep(0.004)

        # Signal done
        write_output_integer_register(25, 3)
        # Wait for master to reset to 0
        while (read_input_integer_register(25) != 0):
          sleep(tWait)
        end
        # Reset self to idle (stage 0)
        write_output_integer_register(25, 0)
  
      elif functionCode == 14:
        # Acknowledge command received (stage 2)
        write_output_integer_register(25, 2)

        n = read_input_integer_register(27) #The number (id) of the output
        l = read_input_boolean_register(64) #signal level
        set_standard_digital_out(n, l)
        sleep(0.004)
        
        # Signal done
        write_output_integer_register(25, 3) 
        # Wait for master to reset to 0
        while (read_input_integer_register(25) != 0):
          sleep(tWait)
        end
        # Reset self to idle (stage 0)
        write_output_integer_register(25, 0)
  
      elif functionCode == 15:
        # Acknowledge command received (stage 2)
        write_output_integer_register(25, 2)

        n = read_input_integer_register(27) #The number (id) of the output
        av = read_input_float_register(35) #relative signal level for Analog Out
        set_standard_analog_out(n,av)
        sleep(0.004)
        
        # Signal done
        write_output_integer_register(25, 3)
        # Wait for master to reset to 0
        while (read_input_integer_register(25) != 0):
          sleep(tWait)
        end
        # Reset self to idle (stage 0)
        write_output_integer_register(25, 0)
  
      elif functionCode == 16:
        # Acknowledge command received (stage 2)
        write_output_integer_register(25, 2)

        n = read_input_integer_register(27) #The number (id) of the output
        l = read_input_boolean_register(64) #signal level
        set_tool_digital_out(n,l)
        sleep(0.004)
        
        # Signal done
        write_output_integer_register(25, 3)
        # Wait for master to reset to 0
        while (read_input_integer_register(25) != 0):
          sleep(tWait)
        end
        # Reset self to idle (stage 0)
        write_output_integer_register(25, 0)
  
      elif functionCode == 17:
        # Acknowledge command received (stage 2)
        write_output_integer_register(25, 2)

        n = read_input_integer_register(28)
        level = get_configurable_digital_in(n) #needs a boolean output register placeholder 
        sleep(0.004)
        write_output_boolean_register(65,level)
        
        # Signal done
        write_output_integer_register(25, 3)
        # Wait for master to reset to 0
        while (read_input_integer_register(25) != 0):
          sleep(tWait)
        end
        # Reset self to idle (stage 0)
        write_output_integer_register(25, 0)
      
      elif functionCode == 18:
        # Acknowledge command received (stage 2)
        write_output_integer_register(25, 2)

        n = read_input_integer_register(28)
        float = get_standard_analog_in(n) #needs a float output register placeholder
        sleep(0.004)
        write_output_float_register(37,float)
        
        # Signal done
        write_output_integer_register(25, 3)
        # Wait for master to reset to 0
        while (read_input_integer_register(25) != 0):
          sleep(tWait)
        end
        # Reset self to idle (stage 0)
        write_output_integer_register(25, 0)

      elif functionCode == 19:
        # Acknowledge command received (stage 2)
        write_output_integer_register(25, 2)

        n = read_input_integer_register(28)
        level = get_standard_digital_in(n) #needs a boolean output register placeholder 
        sleep(0.004)
        write_output_boolean_register(66,level)

        # Signal done
        write_output_integer_register(25, 3)
    
        # Wait for master to reset to 0
        while (read_input_integer_register(25) != 0):
          sleep(tWait)
        end
        # Reset self to idle (stage 0)
        write_output_integer_register(25, 0)
        
      end
    else:
      if functionCode == 12:
        a = read_input_float_register(30)
        v = read_input_float_register(31)
        t = read_input_float_register(32)
        lookahead_time = read_input_float_register(33)
        gain = read_input_float_register(34)
        read_target()
        servoj(moveTarget,a,v,t,lookahead_time,gain)

      elif functionCode == 20:
        a = read_input_float_register(30)
        v = read_input_float_register(31)
        t = read_input_float_register(32)
        lookahead_time = read_input_float_register(33)
        gain = read_input_float_register(34)
        read_target()
        q = get_inverse_kin(p[moveTarget[0], moveTarget[1], moveTarget[2], moveTarget[3], moveTarget[4], moveTarget[5]])
        servoj(q,a,v,t,lookahead_time,gain)
      end
    end
  end
end