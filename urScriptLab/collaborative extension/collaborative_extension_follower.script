# FOLLOWER SCRIPT


#Define syncPos as desired
global syncPos=[d2r(-91.71),d2r(-98.96),d2r(-126.22),d2r(-46.26),d2r(91.39),d2r(-1.78)]
#Initialization of Variables
global moveTarget = [0, 0, 0, 0, 0, 0]
global ftPartner = p[0, 0, 0, 0, 0, 0]
global inPosSync = 0
global functionCode = 0

def read_target():
    tmpMoveTarget=[0,0,0,0,0,0]
    tmpMoveTarget[0] = read_input_float_register(24)
    tmpMoveTarget[1] = read_input_float_register(25)
    tmpMoveTarget[2] = read_input_float_register(26)
    tmpMoveTarget[3] = read_input_float_register(27)
    tmpMoveTarget[4] = read_input_float_register(28)
    tmpMoveTarget[5] = read_input_float_register(29)
    global moveTarget=tmpMoveTarget
end

thread Thread_function_code():
  
  while (True):
    global functionCode=read_input_integer_register(25)
    #add registers that will be shown to user
    A = read_input_integer_register(26)
    B = read_input_integer_register(25)
    C = read_input_boolean_register(64)
    D = read_input_float_register(34)
    sync()
  end
end
threadId_Thread_2 = run Thread_function_code()

write_output_integer_register(24, 0)
write_output_integer_register(25, 0)

movej(syncPos, a=1.3962634015954636, v=1.0471975511965976)

while (inPosSync != 2 ):
    global inPosSync = read_input_integer_register(24)
end
write_output_integer_register(24, 2)
sync()

while (True):
  startTime = time(mode = 2)
  while(True):
    sync()
    write_output_integer_register(25,1)

    if functionCode == 10:
      a = read_input_float_register(30)
      v = read_input_float_register(31)
      t = read_input_float_register(32)
      r = read_input_float_register(33)
      read_target()
      movel(p[moveTarget[0],moveTarget[1],moveTarget[2],moveTarget[3],moveTarget[4],moveTarget[5]],a,v,t,r)
      write_output_integer_register(25,2)

    elif functionCode == 11:
      a = read_input_float_register(30)
      v = read_input_float_register(31)
      t = read_input_float_register(32)
      r = read_input_float_register(33)
      read_target()
      movej(moveTarget,a,v,t,r)    
      write_output_integer_register(25,2)

    elif functionCode == 13:
      n = read_input_integer_register(27) #The number (id) of the output
      l = read_input_boolean_register(64) #signal level

      set_configurable_digital_out(n, l)
      write_output_integer_register(25,2)

    elif functionCode == 14:
      n = read_input_integer_register(27) #The number (id) of the output
      l = read_input_boolean_register(64) #signal level

      set_standard_digital_out(n, l)
      write_output_integer_register(25,2)

    elif functionCode == 15:
      n = read_input_integer_register(27) #The number (id) of the output
      av = read_input_float_register(34) #relative signal level for Analog Out

      set_standard_analog_out(n,av)
      write_output_integer_register(25,2)

    elif functionCode == 16:
      n = read_input_integer_register(27) #The number (id) of the output
      l = read_input_boolean_register(64) #signal level

      set_tool_digital_out(n,l)
      write_output_integer_register(25,2)

    elif functionCode == 17:
      n = read_input_integer_register(28)
      level = get_configurable_digital_in(n) #needs a boolean output register placeholder 
      write_output_boolean_register(65,level)
      write_output_integer_register(25,2)
    
    elif functionCode == 18:
      n = read_input_integer_register(28)
      float = get_standard_analog_in(n) #needs a float output register placeholder
      write_output_float_register(37,float)
      write_output_integer_register(25,2)

    elif functionCode == 19:
      n = read_input_integer_register(28)
      level = get_standard_digital_in(n) #needs a boolean output register placeholder 
      write_output_boolean_register(66,level)
      write_output_integer_register(25,2)
      

    end    
  end
end