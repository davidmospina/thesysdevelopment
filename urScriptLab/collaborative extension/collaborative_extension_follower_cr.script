# FOLLOWER SCRIPT

#Define syncPos as desired
global syncPos=[d2r(-91.71),d2r(-98.96),d2r(-126.22),d2r(-46.26),d2r(91.39),d2r(-1.78)]
#Initialization of Variables
global moveTarget = [0, 0, 0, 0, 0, 0]
global inPosSync = 0


def read_target():
    tmpMoveTarget=[0,0,0,0,0,0]
    tmpMoveTarget[0] = read_input_float_register(24)
    tmpMoveTarget[1] = read_input_float_register(25)
    tmpMoveTarget[2] = read_input_float_register(26)
    tmpMoveTarget[3] = read_input_float_register(27)
    tmpMoveTarget[4] = read_input_float_register(28)
    tmpMoveTarget[5] = read_input_float_register(29)
    global moveTarget=tmpMoveTarget
end

write_output_integer_register(25, 0)

######### MAIN PROGRAM #########
while (True):
  startTime = time(mode = 2)
  while(True):
    functionCode = read_input_integer_register(25)
    if functionCode != 12:
      if functionCode == 10:
        # Acknowledge command received (stage 2)
        write_output_integer_register(25, 2)
    
        # Read parameters
        a = read_input_float_register(30)
        v = read_input_float_register(31)
        t = read_input_float_register(32)
        r = read_input_float_register(33)
        read_target()
    
        # Execute movel (stage 3)
        movel(p[moveTarget[0], moveTarget[1], moveTarget[2], moveTarget[3], moveTarget[4], moveTarget[5]], a, v, t, r)
    
        # Signal done
        write_output_integer_register(25, 3)
    
        # Wait for master to reset to 0
        while (read_input_integer_register(25) != 0):
          sleep(0.002)
        end
    
        # Reset self to idle (stage 0)
        write_output_integer_register(25, 0)

      elif functionCode == 11:
        #Acknowledge command received (stage 2)
        write_output_integer_register(25, 2)
        a = read_input_float_register(30)
        v = read_input_float_register(31)
        t = read_input_float_register(32)
        r = read_input_float_register(33)
        read_target()
        movej(moveTarget,a,v,t,r)
        
        # Signal done
        write_output_integer_register(25, 3)

        # Wait for master to reset to 0
        while (read_input_integer_register(25) != 0):
          sleep(0.002)
        end
        write_output_integer_register(25, 0)
      end
      # sync()
    else:
      if functionCode == 12:
        a = read_input_float_register(30)
        v = read_input_float_register(31)
        t = read_input_float_register(32)
        lookahead_time = read_input_float_register(33)
        gain = read_input_float_register(34)
        read_target()
        servoj(moveTarget,a,v,t,lookahead_time,gain)

      elif functionCode == 12:
        enter_critical
        a = read_input_float_register(30)
        v = read_input_float_register(31)
        t = read_input_float_register(32)
        lookahead_time = read_input_float_register(33)
        gain = read_input_float_register(34)
        read_target()
        q = get_inverse_kin(p[moveTarget[0], moveTarget[1], moveTarget[2], moveTarget[3], moveTarget[4], moveTarget[5]])
        servoj(q,a,v,t,lookahead_time,gain)
        exit_critical
      end
    end
  end
end