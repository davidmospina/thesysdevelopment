######### COLLABORATIVE EXTENSION FUNCTIONS AND VARIABLES #########
global inPosSync = 0
global syncPos = [d2r(-91.71), d2r(-98.96), d2r(-126.22), d2r(-46.26), d2r(91.39), d2r(-1.78)]

tWait = 0.0005

def movel_partner(pose, a=1.2, v=0.25, t=0, r=0):

  # Wait for follower to be idle (stage 0)
  #popup("function called", "status")
  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end

  # Send parameters
  write_target(pose)
  write_output_float_register(30, a)
  write_output_float_register(31, v)
  write_output_float_register(32, t)
  write_output_float_register(33, r)

  # Send command code (stage 1)
  write_output_integer_register(25, 10)

  # Wait for follower to ACK (stage 2)
  while (read_input_integer_register(25) != 2):
    sleep(tWait)
  end

  # Wait for follower to finish and signal DONE (stage 3)
  while (read_input_integer_register(25) != 3):
    sleep(tWait)
  end

  # Reset master command register (stage 4)
  write_output_integer_register(25, 0)

  # Wait for follower to return to idle
  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end
end

def movej_partner(q, a=1.3, v=0.26, t=0, r=0):

  #popup("function called", "status")
  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end

  #popup("partner is idle", "status")

  write_output_integer_register(25, 11)
  write_target(q)
  write_output_float_register(30, a)
  write_output_float_register(31, v)
  write_output_float_register(32, t)
  write_output_float_register(33, r)
  # Wait for follower to ACK (stage 2)
  while (read_input_integer_register(25) != 2):
    sleep(tWait)
  end

  #popup("command received by partner", "status")

  # Wait for follower to finish and signal DONE (stage 3)
  while (read_input_integer_register(25) != 3):
    sleep(tWait)
  end

  #popup("partner action done", "status")

  # Reset master command register (stage 4)
  write_output_integer_register(25, 0)

  # Wait for follower to return to idle
  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end

  #popup("partner idle", "status")

end

def servoj_partner(q, a=0, v=0, t=0.002, lookahead_time=0.1, gain=300):
  write_output_integer_register(25, 12)
  write_target(q)
  write_output_float_register(30, a)
  write_output_float_register(31, v)
  write_output_float_register(32, t)
  write_output_float_register(33, lookahead_time)
  write_output_float_register(34, gain)
end

def servoj_to_pose_partner(pose, a=0, v=0, t=0.002, lookahead_time=0.1, gain=300):
  write_output_integer_register(25, 20)
  write_target(pose)
  write_output_float_register(30, a)
  write_output_float_register(31, v)
  write_output_float_register(32, t)
  write_output_float_register(33, lookahead_time)
  write_output_float_register(34, gain)
end

def get_actual_tcp_pose_partner():
  x = read_input_float_register(38)
  y = read_input_float_register(39)
  z = read_input_float_register(40)
  rx = read_input_float_register(41)
  ry = read_input_float_register(42)
  rz = read_input_float_register(43)
  pose = p[x,y,z,rx,ry,rz]
  return pose
end 

 
def write_target(target):
  write_output_float_register(24, target[0])
  write_output_float_register(25, target[1])
  write_output_float_register(26, target[2])
  write_output_float_register(27, target[3])
  write_output_float_register(28, target[4])
  write_output_float_register(29, target[5])
end

def set_configurable_digital_out_partner(n, l):
  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end

  write_output_integer_register(27, n) # Select IO number
  write_output_boolean_register(64, l)
  write_output_integer_register(25, 13)

  # Wait for follower to ACK (stage 2)
  while (read_input_integer_register(25) != 2):
    sleep(tWait)
  end

  # Wait for follower to finish and signal DONE (stage 3)
  while (read_input_integer_register(25) != 3):
    sleep(tWait)
  end

  # Reset master command register (stage 4)
  write_output_integer_register(25, 0)

  # Wait for follower to return to idle
  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end
end

def set_standard_digital_out_partner(n, l): 
  # function accepts n range of [0:7] and l level True/False
  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end
  write_output_integer_register(27, n) # Select IO number
  write_output_boolean_register(64, l)
  write_output_integer_register(25, 14) #send command code

  # Wait for follower to ACK (stage 2)
  while (read_input_integer_register(25) != 2):
    sleep(tWait)
  end
  # Wait for follower to finish and signal DONE (stage 3)
  while (read_input_integer_register(25) != 3):
    sleep(tWait)
  end
  # Reset master command register (stage 4)
  write_output_integer_register(25, 0)

  # Wait for follower to return to idle
  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end
end

def set_standard_analog_out_partner(n,f):
  # function accepts n range of [0:1] and f equals the relative signal level between 0 and 1
  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end
  
  write_output_integer_register(27, n) # Select IO number
  write_output_float_register(35, f) 
  write_output_integer_register(25, 15) #send command code
  
  # Wait for follower to ACK (stage 2)
  while (read_input_integer_register(25) != 2):
    sleep(tWait)
  end

  # Wait for follower to finish and signal DONE (stage 3)
  while (read_input_integer_register(25) != 3):
    sleep(tWait)
  end

  # Reset master command register (stage 4)
  write_output_integer_register(25, 0)

  # Wait for follower to return to idle
  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end
end

def set_tool_digital_out_partner(n, l):
  # function accepts n range of [0:1] and l level True/False
  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end
  
  write_output_integer_register(27, n) # Select IO number
  write_output_boolean_register(64, l)
  write_output_integer_register(25, 16)

  # Wait for follower to ACK (stage 2)
  while (read_input_integer_register(25) != 2):
    sleep(tWait)
  end

  # Wait for follower to finish and signal DONE (stage 3)
  while (read_input_integer_register(25) != 3):
    sleep(tWait)
  end

  # Reset master command register (stage 4)
  write_output_integer_register(25, 0)

  # Wait for follower to return to idle
  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end
end

def get_configurable_digital_in_partner(n):
  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end

  write_output_integer_register(28, n) # Select IO number to read from
  write_output_integer_register(25, 17)

  # Wait for follower to ACK (stage 2)
  while (read_input_integer_register(25) != 2):
    sleep(tWait)
  end

  # Wait for follower to finish and signal DONE (stage 3)
  while (read_input_integer_register(25) != 3):
    sleep(tWait)
  end

  read_value1 = read_input_boolean_register(65) #read boolean value
  # Reset master command register (stage 4)
  write_output_integer_register(25, 0)

  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end
  return read_value1
end

def get_standard_analog_in_partner(n):
  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end

  write_output_integer_register(25, 18)
  write_output_integer_register(28, n) # Select IO number

  # Wait for follower to ACK (stage 2)
  while (read_input_integer_register(25) != 2):
    sleep(tWait)
  end

  # Wait for follower to finish and signal DONE (stage 3)
  while (read_input_integer_register(25) != 3):
    sleep(tWait)
  end

  read_value2 = read_input_float_register(37)
  write_output_integer_register(25, 0)

  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end

  return read_value2
end

def get_standard_digital_in_partner(n):
  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end
  write_output_integer_register(25, 19)
  write_output_integer_register(28, n) # Select IO number
  
  # Wait for follower to ACK (stage 2)
  while (read_input_integer_register(25) != 2):
    sleep(tWait)
  end

  # Wait for follower to finish and signal DONE (stage 3)
  while (read_input_integer_register(25) != 3):
    sleep(tWait)
  end

  read_value3 = read_input_boolean_register(66) #boolean value
  write_output_integer_register(25, 0)

  while (read_input_integer_register(25) != 0):
    sleep(tWait)
  end

  return read_value3
end


######### USER PROGRAM FUNCTIONS AND VARIABLES #########

#Initialization of Variables
global programPose = p[0.079, -0.278,0.189,0.0, 3.16, 0.04]

#function and threads
def partnerThread():
 while(True):
   # popup("qNext: " + to_str(qNext), "status")
  pF = pF + wF/500
  deltaZF = aF*sin(pF)
  deltaXF = aF*cos(pF)
  pose = get_actual_tcp_pose()
  nextPosePartner = [pose[0] + deltaXF ,pose[1],pose[2] + deltaZF,pose[3],pose[4],pose[5]]
  servoj_to_pose_partner(nextPosePartner,0,0, 0.001,0.1, gain=1200)
 end
end

######### INITAL SYNC #########
write_output_integer_register(25, 0)

movej(syncPos, a=1.3962634015954636, v=1.0471975511965976)
movej_partner(syncPos, a=1.3962634015954636, v=1.0471975511965976)


while (True):

  programPose = p[0.079, -0.278,0.189,0.0, 3.16, 0.04]
  # pose2 = programPose
  # pose2[2] = pose2[2] + 0.1 
  # pose3 = pose2
  # pose3[1] = pose3[1] + 0.1
  # pose4 = pose3
  # pose4[2] = pose4[2] - 0.1
  # movel_partner(programPose)
  # movel_partner(pose2)
  # movel_partner(pose3)
  # movel_partner(pose4)

  # q = syncPos
  # q1 = q + [d2r(20),d2r(0),d2r(0),d2r(0),d2r(0),d2r(0)]
  # q2 = q1 - [d2r(10),d2r(0),d2r(0),d2r(0),d2r(0),d2r(0)]
  # q3 = q2 + [d2r(10),d2r(0),d2r(0),d2r(0),d2r(0),d2r(0)]
  # q4 = q3 - [d2r(10),d2r(0),d2r(0),d2r(0),d2r(0),d2r(0)]
  # movej_partner(q, a=1.3, v=0.26, t=0, r=0) 
  # movej_partner(q1, a=1.3, v=0.26, t=0, r=0)
  # movej_partner(q2, a=1.3, v=0.26, t=0, r=0)
  # movej_partner(q3, a=1.3, v=0.26, t=0, r=0)
  # movej_partner(q4, a=1.3, v=0.26, t=0, r=0)


  # movel(programPose)
  # movel_partner(programPose)
  # movel(pose2)
  # movel_partner(pose2)
  # movel(pose3)
  # movel_partner(pose3)
  # movel(pose4)
  # movel_partner(pose4)



  # movej(q, a=1.3, v=0.26, t=0, r=0) 
  # movej_partner(q, a=1.3, v=0.26, t=0, r=0) 
  # movej(q1, a=1.3, v=0.26, t=0, r=0)
  # movej_partner(q1, a=1.3, v=0.26, t=0, r=0)
  # movej(q2, a=1.3, v=0.26, t=0, r=0)
  # movej_partner(q2, a=1.3, v=0.26, t=0, r=0)
  # movej(q3, a=1.3, v=0.26, t=0, r=0)
  # movej_partner(q3, a=1.3, v=0.26, t=0, r=0)
  # movej(q4, a=1.3, v=0.26, t=0, r=0)
  # movej_partner(q4, a=1.3, v=0.26, t=0, r=0)

  aM=0.15
  global aF=0.05
  pM = 0
  global pF = 0
  wM=2*3.1416/120 #30 is the limit but for some reson it is going twice times faster than it should in reality with w = 2pi/60 is taking 30 seconds instead of 60
  global wF=2*3.1416/80 #30 is the limit but for some reson it is going twice times faster than it should in reality with w = 2pi/60 is taking 30 seconds instead of 60
  
  poseInitM = programPose
  poseInitF = programPose
  poseInitM[0] = poseInitM[0] + aM
  poseInitF[0] = poseInitF[0] + aM + aF
  movel(poseInitM)
  movel_partner(poseInitF, a=1.3, v=0.26, t=0, r=0)
  qNext = get_inverse_kin(poseInitM)
  thread move_partnerThread(): partnerThread() end
  thrd = run move_partnerThread()
  while (pM<=3.1416):
    pM = pM + wM/500
    deltaZM = aM*sin(pM)
    deltaXM = aM*cos(pM)
    poseNextM = p[0.079 + deltaXM , -0.278, 0.189 + deltaZM ,0.0, 3.16, 0.04]
    qNext = get_inverse_kin(poseNextM)
    servoj(qNext,0,0, 0.001,0.1, gain=1200)
  end
  kill thrd

end

