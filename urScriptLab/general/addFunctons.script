global p=0
global theta = 1.57
global r = 0.05
global f = 0.5

global syncPos = p[0.452,0.13834,0.6810,2.389,-2.494,2.141]
def cPose(p,theta,r,f):
    p = p + f*(2*3.1415/500)
    z = r*sin(theta + p )
    y = r*cos(theta + p )
return [y,z,p]

end
def addTrackedTcp(x,y,z):
    x = tcpPartner[0] + x
    y = tcpPartner[1] + y
    z = tcpPartner[2] + z
return [x,y,z]
end

def addTrackedTcp2(x,y,z):
    mypose =  get_actual_tcp_pose()
    x = mypose[0] + x
    y = mypose[1] + y
    z = mypose[2] + z
    global original_tpc = mypose
return [x,y,z,mypose[3],mypose[4],mypose[5]]
end

def moveNext():
    pos_p = cPose(p,theta,r,f)
    # popup(pos_p,"c pose",blocking = True)
    p = pos_p[2]
    global nextPosition = addTrackedTcp(0,0, pos_p[1])
    # popup(nextPosition,"position",blocking = False)
    q = get_inverse_kin(p[nextPosition[0],nextPosition[1],nextPosition[2],tcpPartner[3],tcpPartner[4],tcpPartner[5]])
    servoj(q,0.7,900)
end

def moveFromAtoB(center):
    pointA = center
    pointB = center
    pointA[1] = pointA[1] + 0.4
    pointB[1] = pointB[1] - 0.4
    movel(pointA,v = 0.130)
    movel(pointB)
end
def movejOffset(point,x,y,z):
    point[0] = point[0] + x
    point[1] = point[1] + y
    point[2] = point[2] + z
    movej(point)
end